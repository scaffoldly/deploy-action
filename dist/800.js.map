{"version":3,"file":"800.js","mappings":"6IAAO,MASMA,EAAe,CACxBC,kBAAmB,CAAEC,KAAM,gBAAiBC,KAAM,qBAClDC,QAAS,CAAEF,KAAM,gBAAiBC,KAAM,mBACxCE,SAAU,CAAEH,KAAM,gBAAiBC,KAAM,YACzCG,OAAQ,CAAEJ,KAAM,gBAAiBC,KAAM,UACvCI,aAAc,CAAEL,KAAM,gBAAiBC,KAAM,yBCZ1C,MAAMK,UAA4B,KACrC,WAAAC,CAAYC,GACRC,MAAMD,GACNE,OAAOC,eAAeC,KAAMN,EAAoBO,UACpD,ECJG,MAAMC,UAA8B,EACvC,WAAAP,CAAYQ,GACRN,MAAM,CACFR,KAAM,wBACNe,OAAQ,YACLD,IAEPH,KAAKX,KAAO,wBACZW,KAAKI,OAAS,SACdN,OAAOC,eAAeC,KAAME,EAAsBD,UACtD,EAEG,MAAMI,UAAyC,EAClD,WAAAV,CAAYQ,GACRN,MAAM,CACFR,KAAM,mCACNe,OAAQ,YACLD,IAEPH,KAAKX,KAAO,mCACZW,KAAKI,OAAS,SACdN,OAAOC,eAAeC,KAAMK,EAAiCJ,UACjE,EAEG,MAAMK,UAAsC,EAC/C,WAAAX,CAAYQ,GACRN,MAAM,CACFR,KAAM,gCACNe,OAAQ,YACLD,IAEPH,KAAKX,KAAO,gCACZW,KAAKI,OAAS,SACdN,OAAOC,eAAeC,KAAMM,EAA8BL,UAC9D,EAEG,MAAMM,UAAgC,EACzC,WAAAZ,CAAYQ,GACRN,MAAM,CACFR,KAAM,0BACNe,OAAQ,YACLD,IAEPH,KAAKX,KAAO,0BACZW,KAAKI,OAAS,SACdN,OAAOC,eAAeC,KAAMO,EAAwBN,UACxD,EAEG,MAAMO,UAAkC,EAC3C,WAAAb,CAAYQ,GACRN,MAAM,CACFR,KAAM,4BACNe,OAAQ,YACLD,IAEPH,KAAKX,KAAO,4BACZW,KAAKI,OAAS,SACdN,OAAOC,eAAeC,KAAMQ,EAA0BP,UAC1D,EAEG,MAAMQ,UAAsC,EAC/C,WAAAd,CAAYQ,GACRN,MAAM,CACFR,KAAM,gCACNe,OAAQ,YACLD,IAEPH,KAAKX,KAAO,gCACZW,KAAKI,OAAS,SACdN,OAAOC,eAAeC,KAAMS,EAA8BR,UAC9D,EAEG,MAAMS,UAAuC,EAChD,WAAAf,CAAYQ,GACRN,MAAM,CACFR,KAAM,iCACNe,OAAQ,YACLD,IAEPH,KAAKX,KAAO,iCACZW,KAAKI,OAAS,SACdN,OAAOC,eAAeC,KAAMU,EAA+BT,UAC/D,EAEG,MAAMU,UAA6C,EACtD,WAAAhB,CAAYQ,GACRN,MAAM,CACFR,KAAM,uCACNe,OAAQ,YACLD,IAEPH,KAAKX,KAAO,uCACZW,KAAKI,OAAS,SACdN,OAAOC,eAAeC,KAAMW,EAAqCV,UACrE,EAEG,MAAMW,EAAiCC,IAAQ,IAC/CA,KACCA,EAAIC,iBAAmB,CAAEA,gBAAiB,QAErCC,EAAwCF,IAAQ,IACtDA,KACCA,EAAIG,aAAe,CAAEA,YAAaJ,EAA8BC,EAAIG,gBAU/DC,EAAsDJ,IAAQ,IACpEA,KACCA,EAAIK,kBAAoB,CAAEA,iBAAkB,QAEvCC,EAAuDN,IAAQ,IACrEA,KACCA,EAAIG,aAAe,CAAEA,YAAaJ,EAA8BC,EAAIG,gB,wBCnHrE,MAAMI,EAAuBC,MAAOC,EAAOC,KAC9C,MAAMC,EAAUC,GAChB,IAAIC,EAMJ,OALAA,EAAOC,GAA0B,IAC1BC,EAAqBN,EAAOC,GAC/B,CAACM,IAAKC,GACN,CAACC,IAAKC,KAEHC,GAAoBV,EAASC,EAAS,SAAKU,EAAWR,EAAK,EAYzDS,EAAsCd,MAAOC,EAAOC,KAC7D,MAAMC,EAAUC,GAChB,IAAIC,EAMJ,OALAA,EAAOC,GAA0B,IAC1BS,EAAoCd,EAAOC,GAC9C,CAACM,IAAKQ,GACN,CAACN,IAAKC,KAEHC,GAAoBV,EAASC,EAAS,SAAKU,EAAWR,EAAK,EAoDzDY,EAAuBjB,MAAOkB,EAAQhB,KAC/C,GAAIgB,EAAOC,YAAc,IACrB,OAAOC,EAAgBF,EAAQhB,GAEnC,MAAMmB,QAAa,QAAUH,EAAOb,KAAMH,GAC1C,IAAIoB,EAAW,CAAC,EAMhB,OALAA,EAAWC,EAAsBF,EAAKG,iBAAkBtB,GACvC,CACbuB,UAAWC,GAAoBR,MAC5BI,EAEQ,EAeNK,EAAsC3B,MAAOkB,EAAQhB,KAC9D,GAAIgB,EAAOC,YAAc,IACrB,OAAOC,EAAgBF,EAAQhB,GAEnC,MAAMmB,QAAa,QAAUH,EAAOb,KAAMH,GAC1C,IAAIoB,EAAW,CAAC,EAMhB,OALAA,EAAWM,EAAqCP,EAAKQ,gCAAiC3B,GACrE,CACbuB,UAAWC,GAAoBR,MAC5BI,EAEQ,EAmEbF,EAAkBpB,MAAOkB,EAAQhB,KACnC,MAAM4B,EAAe,IACdZ,EACHb,WAAY,QAAea,EAAOb,KAAMH,IAEtC6B,EAAYC,GAAmBd,EAAQY,EAAazB,MAC1D,OAAQ0B,GACJ,IAAK,wBACL,IAAK,0CACD,YAAYE,EAA4BH,EAAc5B,GAC1D,IAAK,0BACL,IAAK,qDACD,YAAYgC,EAAuCJ,EAAc5B,GACrE,IAAK,uBACL,IAAK,kDACD,YAAYiC,EAAoCL,EAAc5B,GAClE,IAAK,0BACL,IAAK,4CACD,YAAYkC,EAA8BN,EAAc5B,GAC5D,IAAK,mBACL,IAAK,8CACD,YAAYmC,EAAgCP,EAAc5B,GAC9D,IAAK,uBACL,IAAK,kDACD,YAAYoC,EAAoCR,EAAc5B,GAClE,IAAK,wBACL,IAAK,mDACD,YAAYqC,EAAqCT,EAAc5B,GACnE,IAAK,uCACL,IAAK,yDACD,YAAYsC,EAA2CV,EAAc5B,GACzE,QACI,MAAMuC,EAAaX,EAAazB,KAChC,OAAOqC,GAAkB,CACrBxB,SACAuB,WAAYA,EAAWE,MACvBZ,cAEZ,EAEEE,EAA8BjC,MAAO8B,EAAc5B,KACrD,MAAMG,EAAOyB,EAAazB,KACpBuC,EAAeC,EAAyBxC,EAAKsC,MAAOzC,GACpD4C,EAAY,IAAIjE,EAAsB,CACxC4C,UAAWC,GAAoBI,MAC5Bc,IAEP,OAAO,QAA2BE,EAAWzC,EAAK,EAEhDkC,EAAuCvC,MAAO8B,EAAc5B,KAC9D,MAAMG,EAAOyB,EAAazB,KACpBuC,EAAeG,EAAkC1C,EAAKsC,MAAOzC,GAC7D4C,EAAY,IAAIzD,EAA+B,CACjDoC,UAAWC,GAAoBI,MAC5Bc,IAEP,OAAO,QAA2BE,EAAWzC,EAAK,EAEhDgC,EAAkCrC,MAAO8B,EAAc5B,KACzD,MAAMG,EAAOyB,EAAazB,KACpBuC,EAAeI,EAA6B3C,EAAKsC,MAAOzC,GACxD4C,EAAY,IAAI3D,EAA0B,CAC5CsC,UAAWC,GAAoBI,MAC5Bc,IAEP,OAAO,QAA2BE,EAAWzC,EAAK,EAEhDmC,EAA6CxC,MAAO8B,EAAc5B,KACpE,MAAMG,EAAOyB,EAAazB,KACpBuC,EAAeK,EAAwC5C,EAAKsC,MAAOzC,GACnE4C,EAAY,IAAIxD,EAAqC,CACvDmC,UAAWC,GAAoBI,MAC5Bc,IAEP,OAAO,QAA2BE,EAAWzC,EAAK,EAEhDiC,EAAsCtC,MAAO8B,EAAc5B,KAC7D,MAAMG,EAAOyB,EAAazB,KACpBuC,EAAeM,EAAiC7C,EAAKsC,MAAOzC,GAC5D4C,EAAY,IAAI1D,EAA8B,CAChDqC,UAAWC,GAAoBI,MAC5Bc,IAEP,OAAO,QAA2BE,EAAWzC,EAAK,EAEhD6B,EAAyClC,MAAO8B,EAAc5B,KAChE,MAAMG,EAAOyB,EAAazB,KACpBuC,EAAeO,EAAoC9C,EAAKsC,MAAOzC,GAC/D4C,EAAY,IAAI9D,EAAiC,CACnDyC,UAAWC,GAAoBI,MAC5Bc,IAEP,OAAO,QAA2BE,EAAWzC,EAAK,EAEhD8B,EAAsCnC,MAAO8B,EAAc5B,KAC7D,MAAMG,EAAOyB,EAAazB,KACpBuC,EAAeQ,GAAiC/C,EAAKsC,MAAOzC,GAC5D4C,EAAY,IAAI7D,EAA8B,CAChDwC,UAAWC,GAAoBI,MAC5Bc,IAEP,OAAO,QAA2BE,EAAWzC,EAAK,EAEhD+B,EAAgCpC,MAAO8B,EAAc5B,KACvD,MAAMG,EAAOyB,EAAazB,KACpBuC,EAAeS,GAA2BhD,EAAKsC,MAAOzC,GACtD4C,EAAY,IAAI5D,EAAwB,CAC1CuC,UAAWC,GAAoBI,MAC5Bc,IAEP,OAAO,QAA2BE,EAAWzC,EAAK,EAEhDE,EAAuB,CAACN,EAAOC,KACjC,MAAMoD,EAAU,CAAC,EAOjB,GANkB,MAAdrD,EAAMsD,MACND,EAAQC,IAAOtD,EAAMsD,KAEN,MAAftD,EAAMuD,MACNF,EAAQE,IAAQvD,EAAMuD,KAER,MAAdvD,EAAMwD,IAAc,CACpB,MAAMC,EAAgBC,EAA4B1D,EAAMwD,IAAMvD,GACnC,IAAvBD,EAAMwD,KAAMG,SACZN,EAAQO,WAAa,IAEzBpF,OAAO6E,QAAQI,GAAeI,SAAQ,EAAEC,EAAKC,MAEzCV,EADY,cAAcS,KACXC,CAAK,GAE5B,CAOA,GANiB,MAAb/D,EAAMgE,MACNX,EAAQW,IAAMhE,EAAMgE,KAEN,MAAdhE,EAAMiE,MACNZ,EAAQY,IAAOjE,EAAMiE,KAER,MAAbjE,EAAMkE,IAAa,CACnB,MAAMT,EAAgBU,EAAenE,EAAMkE,IAAKjE,GACtB,IAAtBD,EAAMkE,KAAKP,SACXN,EAAQe,KAAO,IAEnB5F,OAAO6E,QAAQI,GAAeI,SAAQ,EAAEC,EAAKC,MAEzCV,EADY,QAAQS,KACLC,CAAK,GAE5B,CACA,GAAmB,MAAf/D,EAAMqE,IAAe,CACrB,MAAMZ,EAAgBa,EAAkBtE,EAAMqE,IAAOpE,GACzB,IAAxBD,EAAMqE,KAAOV,SACbN,EAAQkB,kBAAoB,IAEhC/F,OAAO6E,QAAQI,GAAeI,SAAQ,EAAEC,EAAKC,MAEzCV,EADY,qBAAqBS,KAClBC,CAAK,GAE5B,CAaA,GAZkB,MAAd/D,EAAMwE,MACNnB,EAAQmB,IAAOxE,EAAMwE,KAEP,MAAdxE,EAAMyE,MACNpB,EAAQoB,IAAOzE,EAAMyE,KAEP,MAAdzE,EAAM0E,MACNrB,EAAQqB,IAAO1E,EAAM0E,KAEP,MAAd1E,EAAM2E,MACNtB,EAAQsB,IAAO3E,EAAM2E,KAEP,MAAd3E,EAAM4E,IAAc,CACpB,MAAMnB,EAAgBoB,EAA4B7E,EAAM4E,IAAM3E,GACnC,IAAvBD,EAAM4E,KAAMjB,SACZN,EAAQyB,iBAAmB,IAE/BtG,OAAO6E,QAAQI,GAAeI,SAAQ,EAAEC,EAAKC,MAEzCV,EADY,oBAAoBS,KACjBC,CAAK,GAE5B,CACA,OAAOV,CAAO,EA+BZvC,EAAsC,CAACd,EAAOC,KAChD,MAAMoD,EAAU,CAAC,EAajB,GAZkB,MAAdrD,EAAMsD,MACND,EAAQC,IAAOtD,EAAMsD,KAEN,MAAftD,EAAMuD,MACNF,EAAQE,IAAQvD,EAAMuD,KAEP,MAAfvD,EAAM+E,MACN1B,EAAQ0B,IAAQ/E,EAAM+E,KAER,MAAd/E,EAAMgF,MACN3B,EAAQ2B,IAAOhF,EAAMgF,KAEP,MAAdhF,EAAMwD,IAAc,CACpB,MAAMC,EAAgBC,EAA4B1D,EAAMwD,IAAMvD,GACnC,IAAvBD,EAAMwD,KAAMG,SACZN,EAAQO,WAAa,IAEzBpF,OAAO6E,QAAQI,GAAeI,SAAQ,EAAEC,EAAKC,MAEzCV,EADY,cAAcS,KACXC,CAAK,GAE5B,CAOA,OANiB,MAAb/D,EAAMgE,MACNX,EAAQW,IAAMhE,EAAMgE,KAEN,MAAdhE,EAAMiE,MACNZ,EAAQY,IAAOjE,EAAMiE,KAElBZ,CAAO,EAkEZK,EAA8B,CAAC1D,EAAOC,KACxC,MAAMoD,EAAU,CAAC,EACjB,IAAI4B,EAAU,EACd,IAAK,MAAMC,KAASlF,EAAO,CACvB,GAAc,OAAVkF,EACA,SAEJ,MAAMzB,EAAgB0B,EAAwBD,EAAOjF,GACrDzB,OAAO6E,QAAQI,GAAeI,SAAQ,EAAEC,EAAKC,MACzCV,EAAQ,UAAU4B,KAAWnB,KAASC,CAAK,IAE/CkB,GACJ,CACA,OAAO5B,CAAO,EAEZ8B,EAA0B,CAACnF,EAAOC,KACpC,MAAMoD,EAAU,CAAC,EAIjB,OAHiB,MAAbrD,EAAMoF,MACN/B,EAAQ+B,IAAMpF,EAAMoF,KAEjB/B,CAAO,EAEZgC,EAAqB,CAACrF,EAAOC,KAC/B,MAAMoD,EAAU,CAAC,EAOjB,OANoB,MAAhBrD,EAAMsF,MACNjC,EAAQiC,IAAStF,EAAMsF,KAET,MAAdtF,EAAMuF,MACNlC,EAAQkC,IAAOvF,EAAMuF,KAElBlC,CAAO,EAEZwB,EAA8B,CAAC7E,EAAOC,KACxC,MAAMoD,EAAU,CAAC,EACjB,IAAI4B,EAAU,EACd,IAAK,MAAMC,KAASlF,EAAO,CACvB,GAAc,OAAVkF,EACA,SAEJ,MAAMzB,EAAgB4B,EAAmBH,GACzC1G,OAAO6E,QAAQI,GAAeI,SAAQ,EAAEC,EAAKC,MACzCV,EAAQ,UAAU4B,KAAWnB,KAASC,CAAK,IAE/CkB,GACJ,CACA,OAAO5B,CAAO,EAEZmC,EAAS,CAACxF,EAAOC,KACnB,MAAMoD,EAAU,CAAC,EAOjB,OANiB,MAAbrD,EAAMyF,MACNpC,EAAQoC,IAAMzF,EAAMyF,KAEN,MAAdzF,EAAM0F,MACNrC,EAAQqC,IAAO1F,EAAM0F,KAElBrC,CAAO,EAEZiB,EAAoB,CAACtE,EAAOC,KAC9B,MAAMoD,EAAU,CAAC,EACjB,IAAI4B,EAAU,EACd,IAAK,MAAMC,KAASlF,EACF,OAAVkF,IAGJ7B,EAAQ,UAAU4B,KAAaC,EAC/BD,KAEJ,OAAO5B,CAAO,EAEZc,EAAiB,CAACnE,EAAOC,KAC3B,MAAMoD,EAAU,CAAC,EACjB,IAAI4B,EAAU,EACd,IAAK,MAAMC,KAASlF,EAAO,CACvB,GAAc,OAAVkF,EACA,SAEJ,MAAMzB,EAAgB+B,EAAON,GAC7B1G,OAAO6E,QAAQI,GAAeI,SAAQ,EAAEC,EAAKC,MACzCV,EAAQ,UAAU4B,KAAWnB,KAASC,CAAK,IAE/CkB,GACJ,CACA,OAAO5B,CAAO,EAEZsC,EAAqB,CAAC1E,EAAQhB,KAChC,MAAMoB,EAAW,CAAC,EAOlB,OANoB,MAAhBJ,EAAO2E,MACPvE,EAASuE,KAAQ,QAAe3E,EAAO2E,MAExB,MAAf3E,EAAO4E,MACPxE,EAASwE,KAAO,QAAe5E,EAAO4E,MAEnCxE,CAAQ,EAEbC,EAAwB,CAACL,EAAQhB,KACnC,MAAMoB,EAAW,CAAC,EAalB,OAZkB,MAAdJ,EAAO6E,MACPzE,EAASyE,IAAMC,EAAe9E,EAAO6E,IAAK7F,IAE1B,MAAhBgB,EAAO+E,MACP3E,EAAS2E,IAAQL,EAAmB1E,EAAO+E,MAE3B,MAAhB/E,EAAOgF,MACP5E,EAAS4E,KAAQ,QAAmBhF,EAAOgF,MAE5B,MAAfhF,EAAO0D,MACPtD,EAASsD,KAAO,QAAe1D,EAAO0D,MAEnCtD,CAAQ,EAiCbM,EAAuC,CAACV,EAAQhB,KAClD,MAAMoB,EAAW,CAAC,EAsBlB,OArBkB,MAAdJ,EAAO6E,MACPzE,EAASyE,IAAMC,EAAe9E,EAAO6E,IAAK7F,IAExB,MAAlBgB,EAAOiF,MACP7E,EAAS6E,KAAU,QAAejF,EAAOiF,MAEzB,MAAhBjF,EAAO+E,MACP3E,EAAS2E,IAAQL,EAAmB1E,EAAO+E,MAE3B,MAAhB/E,EAAOgF,MACP5E,EAAS4E,KAAQ,QAAmBhF,EAAOgF,MAE5B,MAAfhF,EAAOkF,MACP9E,EAAS8E,KAAO,QAAelF,EAAOkF,MAEvB,MAAflF,EAAOmF,MACP/E,EAAS+E,KAAO,QAAenF,EAAOmF,MAEvB,MAAfnF,EAAO0D,MACPtD,EAASsD,KAAO,QAAe1D,EAAO0D,MAEnCtD,CAAQ,EAEb0E,EAAiB,CAAC9E,EAAQhB,KAC5B,MAAMoB,EAAW,CAAC,EAalB,OAZoB,MAAhBJ,EAAOoF,MACPhF,EAASgF,KAAQ,QAAepF,EAAOoF,MAEvB,MAAhBpF,EAAOqF,MACPjF,EAASiF,KAAQ,QAAerF,EAAOqF,MAEvB,MAAhBrF,EAAOsF,MACPlF,EAASkF,KAAQ,QAAetF,EAAOsF,MAEzB,MAAdtF,EAAOuF,MACPnF,EAASmF,KAAM,SAAgB,QAAiCvF,EAAOuF,OAEpEnF,CAAQ,EASbuB,EAA2B,CAAC3B,EAAQhB,KACtC,MAAMoB,EAAW,CAAC,EAIlB,OAHkB,MAAdJ,EAAOwF,MACPpF,EAASoF,KAAM,QAAexF,EAAOwF,MAElCpF,CAAQ,EAoDbyB,EAAoC,CAAC7B,EAAQhB,KAC/C,MAAMoB,EAAW,CAAC,EAIlB,OAHkB,MAAdJ,EAAOwF,MACPpF,EAASoF,KAAM,QAAexF,EAAOwF,MAElCpF,CAAQ,EAEb0B,EAA+B,CAAC9B,EAAQhB,KAC1C,MAAMoB,EAAW,CAAC,EAIlB,OAHkB,MAAdJ,EAAOwF,MACPpF,EAASoF,KAAM,QAAexF,EAAOwF,MAElCpF,CAAQ,EAEb2B,EAA0C,CAAC/B,EAAQhB,KACrD,MAAMoB,EAAW,CAAC,EAIlB,OAHkB,MAAdJ,EAAOwF,MACPpF,EAASoF,KAAM,QAAexF,EAAOwF,MAElCpF,CAAQ,EAEb4B,EAAmC,CAAChC,EAAQhB,KAC9C,MAAMoB,EAAW,CAAC,EAIlB,OAHkB,MAAdJ,EAAOwF,MACPpF,EAASoF,KAAM,QAAexF,EAAOwF,MAElCpF,CAAQ,EAEb6B,EAAsC,CAACjC,EAAQhB,KACjD,MAAMoB,EAAW,CAAC,EAIlB,OAHkB,MAAdJ,EAAOwF,MACPpF,EAASoF,KAAM,QAAexF,EAAOwF,MAElCpF,CAAQ,EAEb8B,GAAmC,CAAClC,EAAQhB,KAC9C,MAAMoB,EAAW,CAAC,EAIlB,OAHkB,MAAdJ,EAAOwF,MACPpF,EAASoF,KAAM,QAAexF,EAAOwF,MAElCpF,CAAQ,EAEb+B,GAA6B,CAACnC,EAAQhB,KACxC,MAAMoB,EAAW,CAAC,EAIlB,OAHkB,MAAdJ,EAAOwF,MACPpF,EAASoF,KAAM,QAAexF,EAAOwF,MAElCpF,CAAQ,EAEbI,GAAuBR,IAAW,CACpCyF,eAAgBzF,EAAOC,WACvByF,UAAW1F,EAAOf,QAAQ,qBAAuBe,EAAOf,QAAQ,sBAAwBe,EAAOf,QAAQ,oBACvG0G,kBAAmB3F,EAAOf,QAAQ,cAClC2G,KAAM5F,EAAOf,QAAQ,iBAGnBuC,IAAoB,QAAkB,GACtC9B,GAAsBZ,MAAOE,EAASC,EAAS4G,EAAMC,EAAkB3G,KACzE,MAAM,SAAE4G,EAAQ,SAAEC,EAAW,QAAO,KAAEC,EAAMJ,KAAMK,SAAmBlH,EAAQmH,WACvE/F,EAAW,CACb4F,WACAD,WACAE,OACAG,OAAQ,OACRP,KAAMK,EAASG,SAAS,KAAOH,EAASI,MAAM,GAAI,GAAKT,EAAOK,EAAWL,EACzE5G,WAQJ,YANyBU,IAArBmG,IACA1F,EAAS2F,SAAWD,QAEXnG,IAATR,IACAiB,EAASjB,KAAOA,GAEb,IAAI,KAAciB,EAAS,EAEhClB,GAAiB,CACnB,eAAgB,qCAEdO,GAAI,aACJH,GAAK,SACL8F,GAAO,cACP7F,GAAM,aACNoF,GAAO,gBACPI,GAAO,kBAEPjF,GAAS,4BAET8E,GAAM,MACNO,GAAM,WACNN,GAAK,cACLP,GAAM,mBAGNtB,GAAM,kBACNuC,GAAK,aACLhC,GAAM,aASNiB,GAAK,MAGLzB,GAAK,SACLR,GAAM,aAEN8B,GAAQ,cACRV,GAAM,mBACNI,GAAM,aACNiB,GAAO,mBACPE,GAAM,WACN7C,GAAM,UACNC,GAAO,kBAEP+C,GAAO,kBAEPJ,GAAS,8BACTvB,GAAM,iBACNF,GAAM,eAEN8B,GAAO,eACPrC,GAAK,OACLQ,GAAM,YACNL,GAAO,oBAEP5D,GAAK,UACLiF,GAAM,QACNX,GAAO,mBACPK,GAAK,MACLqB,GAAK,UACLpG,GAA6BmH,GAAgBhJ,OAAO6E,QAAQmE,GAC7DC,KAAI,EAAE3D,EAAKC,MAAW,QAA6BD,GAAO,KAAM,QAA6BC,KAC7F2D,KAAK,KACJ3F,GAAqB,CAACd,EAAQG,SACPR,IAArBQ,EAAKsB,OAAOiF,KACLvG,EAAKsB,MAAMiF,KAEG,KAArB1G,EAAOC,WACA,gBADX,EC12BG,MAAM0G,WAA0B,KAClCC,eACAC,GAAG,IACDlK,IAEFmK,GAAE,SAAUC,EAASC,EAAIC,EAAQC,GAClC,MAAO,EACH,QAAeD,EAAQxJ,KAAK0J,UAAW1J,KAAK2J,cAC5C,QAAkBH,EAAQF,EAAQM,oCAE1C,IACKC,EAAE,mCAAoC,aAAc,CAAC,GACrDC,EAAE,YAAa,qBACfC,OAAE,EAAQhJ,GACViJ,IAAI5I,GACJ6I,GAAG3H,GACH4H,UChBE,MAAMC,WAAyC,KACjDhB,eACAC,GAAG,IACDlK,IAEFmK,GAAE,SAAUC,EAASC,EAAIC,EAAQC,GAClC,MAAO,EACH,QAAeD,EAAQxJ,KAAK0J,UAAW1J,KAAK2J,cAC5C,QAAkBH,EAAQF,EAAQM,oCAE1C,IACKC,EAAE,mCAAoC,4BAA6B,CAAC,GACpEC,EAAE,YAAa,oCACfC,EAAE9I,EAAoDE,GACtD6I,IAAI7H,GACJ8H,GAAGjH,GACHkH,UCrBL,MAAME,GAA6B,YAC7BC,GAAgBhJ,MAAOiJ,EAASC,EAAeC,KACjD,MAAMC,EAA4B,mBAAZH,QAA+BA,IAAYA,EAC3DI,EAAwC,mBAAlBH,QAAqCA,IAAkBA,EAEnF,OADAC,GAA0BG,QAAQ,qCAAsC,sBAAuB,GAAGF,eAAqB,GAAGC,oBAAgC,GAAGN,oBACtJK,GAAUC,GAAgBN,EAA0B,E,gHCJxD,MAAMQ,GAA6CvJ,MAAOmI,EAAQjI,EAASD,KACvE,CACHuJ,WAAW,QAAiBtJ,GAASsJ,UACrCJ,aAAe,QAAkBjB,EAAOiB,OAAzB,IACX,MACI,MAAM,IAAIzG,MAAM,0DACnB,EAFD,KAyBC8G,GAAoCC,IAC7C,MAAMnL,EAAU,GAChB,OAAQmL,EAAeF,WACnB,IAAK,qBAIL,IAAK,4BACDjL,EAAQoL,KAZT,CACHC,SAAU,sBAYN,MAEJ,QACIrL,EAAQoL,KAhCpB,SAA0CD,GACtC,MAAO,CACHE,SAAU,iBACVC,kBAAmB,CACf7L,KAAM,MACNoL,OAAQM,EAAeN,QAE3BU,oBAAqB,CAAC3B,EAAQjI,KAAY,CACtC2J,kBAAmB,CACf1B,SACAjI,aAIhB,CAkByB6J,CAAiCL,IAGtD,OAAOnL,CAAO,EC/CLyL,GAAoB/J,GACtB,IAAM,uCAA4CgK,MAAK,EAAGD,qBAAsBA,EAAgB/J,EAAhB+J,K,wICD3F,MAAME,GAAI,WAAYC,GAAI,OAAQC,GAAI,KAAMC,GAAI,OAAQC,GAAI,MAC3CC,IAAI,EAAMC,GAAI,gBAAiBC,GAAI,eAAgBC,GAAI,QAAoBC,GAAI,YAAaC,GAAI,WAAYC,GAAI,mDAAoDC,GAAI,OAAQC,GAAI,QAASC,GAAI,UAAWhD,GAAI,CAAE,CAACkC,KAAI,EAAO,CAACC,IAAI,UAAY1B,GAAI,CAAE,CAACyB,KAAI,EAAM,SAAW,EAAO,CAACC,IAAI,WAAa/B,GAAI,CAAE,CAACkC,IAAI,YAAcW,GAAI,CAAE,CAACb,IAAI,QAAS,CAACC,IAAI,CAAC,CAAE,CAACC,IAAI,YAAeY,GAAI,CAAE,CAACZ,IAAI,UAAYa,GAAI,CAAE,CAACf,IAAI,gBAAiB,CAACC,IAAI,CAACa,IAAI,OAAU,mBAAqB1C,GAAI,CAAE,CAAC8B,IAAI,WAAac,GAAI,CAAE,CAACd,IAAI,gBAAkBe,GAAI,CAAE,IAAO,4BAA6B,WAAc,CAAE,YAAe,CAAC,CAAE,KAAQX,GAAG,YAAjhB,MAAmiB,cAAiBC,MAAQ,QAAW,CAAC,GAAKW,GAAI,CAAC,EAAGC,GAAI,CAAE,WAAc,CAAC,CAAE,CAACnB,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,gBAAkB,CAACN,IAAIS,GAAG,CAAClB,IAAIS,IAAKY,GAAI,CAAE,CAACpB,IAAII,GAAG,CAACH,IAAI,CAAC7B,IAAG,IAASiD,GAAI,CAAE,CAACrB,IAAII,GAAG,CAACH,IAAI,CAACe,IAAG,IAASM,GAAI,CAAE,CAACtB,IAAIY,GAAG,CAACX,IAAI,CAAC,CAAE,CAACC,IAAI,mBAAqB,iBAAmBqB,GAAI,CAAE,CAACrB,IAAI,mBAAqBsB,GAAI,CAAE,CAACxB,IAAII,GAAG,CAACH,IAAI,EAAC,EAAM,CAAE,CAACD,IAAIY,GAAG,CAACX,IAAI,CAACsB,GAAG,wBAA2BE,GAAI,CAAC,CAAE,CAACzB,IAAI,QAAS,CAACC,IAAI,CAACjC,MAAO0D,GAAI,CAACN,IAAIO,GAAI,CAACN,IAEpgCO,GADC,CAAEC,QAAS,MAAOC,WAAY,CAAE/N,OAAQ6J,GAAG5J,aAAcqK,GAAGxK,QAASwK,GAAGvK,SAAU8J,GAAGlK,kBAAmB2K,IAAK0D,MAAO,CAAC,CAAEC,WAAY,CAAC,CAAE,CAAChC,IAAII,GAAG,CAACH,IAAI,CAAC,CAAE,CAACC,IAAI,qBAAuBC,KAAM,CAAE,CAACH,IAAI,MAAO,CAACC,IAAIwB,IAAKZ,GAAGE,GAAG,CAAE,CAACf,IAAII,GAAG,CAACH,IAAI,CAAC7B,IAD1O,IACmP,CAAE,CAAC4B,IAAII,GAAG,CAACH,IAAI,CAACe,IADnQ,KAC6Qe,MAAO,CAAC,CAAEC,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,oBAAsB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,gBAAkB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,oBAAsB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,oBAAsB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAKW,GAAG,CAAEa,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,kBAAoB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,kBAAoB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,gBAAkB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,eAAiB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,eAAiB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,eAAiB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,eAAiB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAGP,MAAOtD,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,eAAiB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,eAAiB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEwB,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAACa,GAAG,eAAiB7D,SAAUgE,GAAG,CAAClB,IAAIS,IAAK,CAAEvD,SAAU,CAAEgF,IAAKxB,GAAGyB,WAAY,CAAEC,YAAa,CAAC,CAAEvO,KAAM0M,GAAG8B,YAD72C,MAC63CC,cAAe,cAAiBtM,QAASmL,IAAK,CAACnB,IAAIS,KAAM,CAACT,IAAIW,IAAK,CAAEsB,WAAYP,GAAGM,MAAO,CAAC,CAAEC,WAAYN,GAAGY,MAAO,oEAAqE,CAACvC,IAAIY,IAAK,CAAEqB,WAAYL,GAAGW,MAAO,yEAA0E,CAACvC,IAAIY,IAAK,CAAE1D,SAAU,CAAEgF,IAAKjE,GAAGkE,WAAYhB,GAAGnL,QAASmL,IAAK,CAACnB,IAAIS,KAAM,CAACT,IAAIW,IAAK,CAAEsB,WAAY,CAACnB,IAAIkB,MAAO,CAAC,CAAEC,WAAY,CAACjB,IAAIgB,MAAO,CAAC,CAAEC,WAAY,CAACZ,GAAGC,IAAIU,MAAO,CAAC,CAAEC,WAAY,CAAC,CAAE,CAAChC,IAAII,GAAG,CAACH,IAAI,CAACE,GAAGmB,KAAME,IAAIO,MAAO,CAAC,CAAE9E,SAAU,CAAEgF,IAAK,iEAAkEC,WAAYhB,GAAGnL,QAASmL,IAAK,CAACnB,IAAIS,KAAM,CAACT,IAAIW,IAAK,CAAE4B,MAAO,kFAAmF,CAACvC,IAAIY,KAAM,CAACZ,IAAIW,IAAK,CAAEsB,WAAYN,GAAGK,MAAO,CAAC,CAAEC,WAAY,CAAC,CAAE,CAAChC,IAAII,GAAG,CAACH,IAAI,CAACqB,GAAGnB,MAAO4B,MAAO,CAAC,CAAEC,WAAY,CAAC,CAAE,CAAChC,IAAIK,GAAG,CAACJ,IAAI,CAAC,CAAE,CAACD,IAAIY,GAAG,CAACX,IAAI,CAACsB,GAAG,SAAW,gBAAkBtE,SAAU,CAAEgF,IAAK,qCAAsCC,WAAYhB,GAAGnL,QAASmL,IAAK,CAACnB,IAAIS,IAAK,CAAEvD,SAAU,CAAEgF,IAAK,wDAAyDC,WAAYhB,GAAGnL,QAASmL,IAAK,CAACnB,IAAIS,KAAM,CAACT,IAAIW,IAAK,CAAE4B,MAAO,2DAA4D,CAACvC,IAAIY,KAAM,CAACZ,IAAIW,IAAK,CAAEsB,WAAYL,GAAGI,MAAO,CAAC,CAAEC,WAAY,CAACR,IAAIO,MAAO,CAAC,CAAE9E,SAAU,CAAEgF,IAAK,4DAA6DC,WAAYhB,GAAGnL,QAASmL,IAAK,CAACnB,IAAIS,KAAM,CAACT,IAAIW,IAAK,CAAE4B,MAAO,qEAAsE,CAACvC,IAAIY,KAAM,CAACZ,IAAIW,IAAKS,GAAG,CAAElE,SAAU,CAAEgF,IAAKxB,GAAGyB,WAAYhB,GAAGnL,QAASmL,IAAK,CAACnB,IAAIS,KAAM,CAACT,IAAIW,KAAM,CAACX,IAAIW,IAAK,CAAE4B,MAAO,wCAAyC,CAACvC,IAAIY,MCAljG4B,GAA0B,CAACC,EAAgB1M,EAAU,CAAC,KACxD,SAAgB8L,GAAS,CAC5BY,eAAgBA,EAChBC,OAAQ3M,EAAQ2M,S,8BCLjB,MAAMC,GAAqCC,IAC9C,MAAMC,EAAmBD,EAAcE,gBACvC,IAAIC,EAA0BH,EAAcI,uBACxCC,EAAeL,EAAcM,YACjC,MAAO,CACH,iBAAAC,CAAkBC,GACd,MAAMC,EAAQR,EAAiBS,WAAWC,GAAWA,EAAO9D,WAAa2D,EAAe3D,YACzE,IAAX4D,EACAR,EAAiBrD,KAAK4D,GAGtBP,EAAiBW,OAAOH,EAAO,EAAGD,EAE1C,EACAN,gBAAe,IACJD,EAEX,yBAAAY,CAA0BT,GACtBD,EAA0BC,CAC9B,EACAA,uBAAsB,IACXD,EAEX,cAAAW,CAAeR,GACXD,EAAeC,CACnB,EACAA,YAAW,IACAD,EAEd,ECdE,MAAMU,WAAkB,KAC3B,WAAAxP,KAAgByP,IACZ,MACMC,GZlBkCzP,EagBhB,CAAC4J,KAC7B,QAAgC8F,QAAQhC,SACxC,MAAMiC,GAAe,QAA0B/F,GACzCgG,EAAwB,IAAMD,IAAejE,KAAK,MAClDmE,ECZsB,CAACjG,IACtB,CACHkG,WAAY,aACZC,cAAenG,GAAQmG,eAAiB,KACxCC,cAAepG,GAAQoG,eAAiB,KACxCC,kBAAmBrG,GAAQqG,oBAAqB,EAChDC,iBAAkBtG,GAAQsG,kBAAoB9B,GAC9C+B,WAAYvG,GAAQuG,YAAc,GAClCvB,uBAAwBhF,GAAQgF,wBAA0B1D,GAC1DwD,gBAAiB9E,GAAQ8E,iBAAmB,CACxC,CACIrD,SAAU,iBACV+E,iBAAmBC,GAAQA,EAAIC,oBAAoB,kBACnDC,OAAQ,IAAIC,GAAA,GAEhB,CACInF,SAAU,oBACV+E,iBAAmBC,GAAQA,EAAIC,oBAAoB,sBAAwB,WAAa,CAAG,IAC3FC,OAAQ,IAAI,QAGpBjC,OAAQ1E,GAAQ0E,QAAU,IAAI,KAC9BmC,UAAW7G,GAAQ6G,WAAa,MAChCC,UAAW9G,GAAQ8G,WAAa,KAChCC,YAAa/G,GAAQ+G,aAAe,MACpCC,YAAahH,GAAQgH,aAAe,QDbb,CAAuBhH,GAElD,OADA,QAAgB8F,QAAQhC,SACjB,IACAmC,KACAjG,EACHiH,QAAS,OACTlB,eACAmB,kBAAmBlH,GAAQkH,mBAAqB,KAChDC,0BAA2BnH,GAAQmH,2BAA6B,GAChEC,yBAA0BpH,GAAQoH,2BAC9B,SAAiB,CAAEP,UAAWZ,EAAmBY,UAAWQ,c,YAChEvC,gBAAiB9E,GAAQ8E,iBAAmB,CACxC,CACIrD,SAAU,iBACV+E,iBAAmBC,GAAQA,EAAIC,oBAAoB,mBAC/C,OAAQY,SAAkB,GAA0BA,GAASC,UAAY,CAAC,EAAhD,IAC9BZ,OAAQ,IAAIC,GAAA,GAEhB,CACInF,SAAU,oBACV+E,iBAAmBC,GAAQA,EAAIC,oBAAoB,sBAAwB,WAAa,CAAG,IAC3FC,OAAQ,IAAI,QAGpBa,YAAaxH,GAAQwH,cAAe,QAAe,OACnDvG,OAAQjB,GAAQiB,SAAU,QAAe,MAA4B,OACrEwG,eAAgB,MAAeC,OAAO1H,GAAQyH,gBAAkBzB,GAChE2B,UAAW3H,GAAQ2H,YACf,QAAe,IACR,MACHC,QAAS/P,gBAAmBmO,KAAyB2B,WAAa,QAE1EE,OAAQ7H,GAAQ6H,QAAU,KAAKC,KAAK,KAAM,UAC1CC,gBAAiB/H,GAAQ+H,iBAAmB,MAC5CC,qBAAsBhI,GAAQgI,uBAAwB,QAAe,OACrEC,gBAAiBjI,GAAQiI,kBAAmB,QAAe,OAC9D,EDvCqB,CAAmBrC,GAAiB,CAAC,GZhBpD,IACAxP,EACH4R,qBAAsB5R,EAAQ4R,uBAAwB,EACtDC,gBAAiB7R,EAAQ6R,kBAAmB,EAC5CC,kBAAmB9R,EAAQ8R,oBAAqB,EAChDC,mBAAoB,QANmB,IAAC/R,EYmBxC,MAAMgS,GAAY,SAAoBvC,GAChCwC,GAAY,QAAsBD,GAClCE,GAAY,SAAmBD,GAC/BE,GAAY,SAAwBD,GAGpCE,EGpB0B,EAAC5D,EAAe2B,KACpD,MAAMkC,EAAyB,KACd,SAAmC7D,OACnC,QAAiCA,OACjC,QAAqCA,MACrCD,GAAkCC,IAGnD,OADA2B,EAAW5K,SAAS+M,GAAcA,EAAUC,UAAUF,KAC/C,IACA7D,MACA,SAAuC6D,OACvC,QAA4BA,OAC5B,QAAgCA,OJcEzI,EIbLyI,EJc7B,CACH3D,gBAAiB9E,EAAO8E,kBACxBE,uBAAwBhF,EAAOgF,yBAC/BE,YAAalF,EAAOkF,iBAJgB,IAAClF,CIZxC,EHMqB4I,CL4BiB,CAAC5I,IACxC,MAAM6I,GAL2B/Q,EAKKkI,EALK,IACxClI,EACHgR,cAAenD,KAFiB,IAAC7N,EAOjC,MAAO,KADU,EAAAiR,GAAA,GAAyBF,GAGzC,EKlCqBG,EADA,SAAuBT,IAEa3C,GAAeW,YAAc,IACnFlQ,MAAMmS,GACNhS,KAAKwJ,OAASwI,EACdhS,KAAKyS,gBAAgBC,KAAI,SAAe1S,KAAKwJ,SAC7CxJ,KAAKyS,gBAAgBC,KAAI,SAAuB1S,KAAKwJ,SACrDxJ,KAAKyS,gBAAgBC,KAAI,SAAoB1S,KAAKwJ,SAClDxJ,KAAKyS,gBAAgBC,KAAI,SAAgB1S,KAAKwJ,SAC9CxJ,KAAKyS,gBAAgBC,KAAI,SAA4B1S,KAAKwJ,SAC1DxJ,KAAKyS,gBAAgBC,KAAI,SAAmB1S,KAAKwJ,SACjDxJ,KAAKyS,gBAAgBC,KAAI,SAAuC1S,KAAKwJ,OAAQ,CACzEmJ,iCAAkC3S,KAAK4S,6CACvCC,+BAAgC7S,KAAK8S,uCAEzC9S,KAAKyS,gBAAgBC,KAAI,SAAqB1S,KAAKwJ,QACvD,CACA,OAAAuJ,GACIlT,MAAMkT,SACV,CACA,0CAAAH,GACI,OAAOhI,EACX,CACA,iCAAAkI,GACI,OAAOzR,MAAOmI,GAAW,IAAI,MAA8B,CACvD,iBAAkBA,EAAOkF,aAEjC,EIhDJ,MAAMsE,GAA+B,CAACC,EAAUC,IACvCA,EAGM,cAAoCD,EACvC,WAAAtT,CAAY6J,GACR3J,MAAM2J,GACN,IAAK,MAAM2J,KAAiBD,EACxBlT,KAAKyS,gBAAgBC,IAAIS,EAEjC,GARGF,EAWF,GAAwB,CAACG,EAAa,CAAC,EAAGC,IVNlB,EAACD,EAAYd,KAC9C,IAAIgB,EACAC,EACJ,OAAOlS,MAAOmS,EAAaC,KAEvB,GADAF,EAAqBC,GAChBF,EAAW,CACZ,MAAM,OAAEpF,EAASkF,GAAYM,oBAAoBxF,OAAM,OAAEzD,EAAM,eAAEwG,EAAiBmC,GAAYM,oBAAoBzC,eAAc,yBAAEzG,GAA8B4I,EAC1JO,QAAuBtJ,GAAcI,EAAQ2I,GAAYM,oBAAoBjJ,OAAQD,GAC3F8I,EAAY,IAAIhB,EAAc,CAC1B3B,0BAA2B,IAAMtP,SAAYkS,EAC7C9I,OAAQkJ,EACR1C,eAAgBA,EAChB/C,OAAQA,GAEhB,CACA,MAAM,YAAElN,SAAsBsS,EAAUM,KAAK,IAAI1K,GAAkBuK,IACnE,IAAKzS,IAAgBA,EAAY6S,cAAgB7S,EAAYF,gBACzD,MAAM,IAAIkD,MAAM,uDAAuDyP,EAAOK,WAElF,MAAO,CACHC,YAAa/S,EAAY6S,YACzBG,gBAAiBhT,EAAYF,gBAC7BmT,aAAcjT,EAAYkT,aAC1BC,WAAYnT,EAAYoT,WACxBC,gBAAiBrT,EAAYsT,gBAChC,CACJ,EUpBiE,CAAyBlB,EAAYJ,GAA6B7D,GAAWkE,IACtI,GAAuC,CAACD,EAAa,CAAC,EAAGC,IVqBlB,EAACD,EAAYd,KAC7D,IAAIgB,EACJ,OAAOjS,MAAOoS,IACV,IAAKH,EAAW,CACZ,MAAM,OAAEpF,EAASkF,GAAYM,oBAAoBxF,OAAM,OAAEzD,EAAM,eAAEwG,EAAiBmC,GAAYM,oBAAoBzC,eAAc,yBAAEzG,GAA8B4I,EAC1JO,QAAuBtJ,GAAcI,EAAQ2I,GAAYM,oBAAoBjJ,OAAQD,GAC3F8I,EAAY,IAAIhB,EAAc,CAC1B7H,OAAQkJ,EACR1C,eAAgBA,EAChB/C,OAAQA,GAEhB,CACA,MAAM,YAAElN,SAAsBsS,EAAUM,KAAK,IAAIzJ,GAAiCsJ,IAClF,IAAKzS,IAAgBA,EAAY6S,cAAgB7S,EAAYF,gBACzD,MAAM,IAAIkD,MAAM,sEAAsEyP,EAAOK,WAEjG,MAAO,CACHC,YAAa/S,EAAY6S,YACzBG,gBAAiBhT,EAAYF,gBAC7BmT,aAAcjT,EAAYkT,aAC1BC,WAAYnT,EAAYoT,WACxBC,gBAAiBrT,EAAYsT,gBAChC,CACJ,EU5CgF,CAAwClB,EAAYJ,GAA6B7D,GAAWkE,G","sources":["webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthSchemeProvider.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/credentialDefaultProvider.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthExtensionConfiguration.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/STSClient.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/runtimeExtensions.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js"],"sourcesContent":["export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        useGlobalEndpoint: options.useGlobalEndpoint ?? false,\n        defaultSigningName: \"sts\",\n    };\n};\nexport const commonParams = {\n    UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n    UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n    Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n    Region: { type: \"builtInParams\", name: \"region\" },\n    UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n};\n","import { ServiceException as __ServiceException, } from \"@smithy/smithy-client\";\nexport { __ServiceException };\nexport class STSServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, STSServiceException.prototype);\n    }\n}\n","import { SENSITIVE_STRING } from \"@smithy/smithy-client\";\nimport { STSServiceException as __BaseException } from \"./STSServiceException\";\nexport class ExpiredTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ExpiredTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ExpiredTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ExpiredTokenException.prototype);\n    }\n}\nexport class MalformedPolicyDocumentException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"MalformedPolicyDocumentException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"MalformedPolicyDocumentException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);\n    }\n}\nexport class PackedPolicyTooLargeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"PackedPolicyTooLargeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"PackedPolicyTooLargeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);\n    }\n}\nexport class RegionDisabledException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"RegionDisabledException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"RegionDisabledException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, RegionDisabledException.prototype);\n    }\n}\nexport class IDPRejectedClaimException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IDPRejectedClaimException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IDPRejectedClaimException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);\n    }\n}\nexport class InvalidIdentityTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidIdentityTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidIdentityTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);\n    }\n}\nexport class IDPCommunicationErrorException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IDPCommunicationErrorException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IDPCommunicationErrorException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);\n    }\n}\nexport class InvalidAuthorizationMessageException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAuthorizationMessageException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAuthorizationMessageException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);\n    }\n}\nexport const CredentialsFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING }),\n});\nexport const AssumeRoleResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n});\nexport const AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SAMLAssertion && { SAMLAssertion: SENSITIVE_STRING }),\n});\nexport const AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n});\nexport const AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.WebIdentityToken && { WebIdentityToken: SENSITIVE_STRING }),\n});\nexport const AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n});\nexport const GetFederationTokenResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n});\nexport const GetSessionTokenResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n});\n","import { parseXmlBody as parseBody, parseXmlErrorBody as parseErrorBody } from \"@aws-sdk/core\";\nimport { HttpRequest as __HttpRequest } from \"@smithy/protocol-http\";\nimport { collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseInt32 as __strictParseInt32, withBaseException, } from \"@smithy/smithy-client\";\nimport { ExpiredTokenException, IDPCommunicationErrorException, IDPRejectedClaimException, InvalidAuthorizationMessageException, InvalidIdentityTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException, } from \"../models/models_0\";\nimport { STSServiceException as __BaseException } from \"../models/STSServiceException\";\nexport const se_AssumeRoleCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleRequest(input, context),\n        [_A]: _AR,\n        [_V]: _,\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_AssumeRoleWithSAMLCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleWithSAMLRequest(input, context),\n        [_A]: _ARWSAML,\n        [_V]: _,\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_AssumeRoleWithWebIdentityCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleWithWebIdentityRequest(input, context),\n        [_A]: _ARWWI,\n        [_V]: _,\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DecodeAuthorizationMessageCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_DecodeAuthorizationMessageRequest(input, context),\n        [_A]: _DAM,\n        [_V]: _,\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetAccessKeyInfoCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetAccessKeyInfoRequest(input, context),\n        [_A]: _GAKI,\n        [_V]: _,\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetCallerIdentityCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetCallerIdentityRequest(input, context),\n        [_A]: _GCI,\n        [_V]: _,\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetFederationTokenCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetFederationTokenRequest(input, context),\n        [_A]: _GFT,\n        [_V]: _,\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetSessionTokenCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetSessionTokenRequest(input, context),\n        [_A]: _GST,\n        [_V]: _,\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const de_AssumeRoleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nexport const de_AssumeRoleWithSAMLCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nexport const de_AssumeRoleWithWebIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nexport const de_DecodeAuthorizationMessageCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nexport const de_GetAccessKeyInfoCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nexport const de_GetCallerIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nexport const de_GetFederationTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nexport const de_GetSessionTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);\n        case \"IDPCommunicationError\":\n        case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n            throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);\n        case \"InvalidAuthorizationMessageException\":\n        case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n            throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nconst de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_ExpiredTokenException(body.Error, context);\n    const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_IDPCommunicationErrorException(body.Error, context);\n    const exception = new IDPCommunicationErrorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_IDPRejectedClaimException(body.Error, context);\n    const exception = new IDPRejectedClaimException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);\n    const exception = new InvalidAuthorizationMessageException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_InvalidIdentityTokenException(body.Error, context);\n    const exception = new InvalidIdentityTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);\n    const exception = new MalformedPolicyDocumentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_PackedPolicyTooLargeException(body.Error, context);\n    const exception = new PackedPolicyTooLargeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_RegionDisabledExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_RegionDisabledException(body.Error, context);\n    const exception = new RegionDisabledException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst se_AssumeRoleRequest = (input, context) => {\n    const entries = {};\n    if (input[_RA] != null) {\n        entries[_RA] = input[_RA];\n    }\n    if (input[_RSN] != null) {\n        entries[_RSN] = input[_RSN];\n    }\n    if (input[_PA] != null) {\n        const memberEntries = se_policyDescriptorListType(input[_PA], context);\n        if (input[_PA]?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input[_P] != null) {\n        entries[_P] = input[_P];\n    }\n    if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n    }\n    if (input[_T] != null) {\n        const memberEntries = se_tagListType(input[_T], context);\n        if (input[_T]?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input[_TTK] != null) {\n        const memberEntries = se_tagKeyListType(input[_TTK], context);\n        if (input[_TTK]?.length === 0) {\n            entries.TransitiveTagKeys = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `TransitiveTagKeys.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input[_EI] != null) {\n        entries[_EI] = input[_EI];\n    }\n    if (input[_SN] != null) {\n        entries[_SN] = input[_SN];\n    }\n    if (input[_TC] != null) {\n        entries[_TC] = input[_TC];\n    }\n    if (input[_SI] != null) {\n        entries[_SI] = input[_SI];\n    }\n    if (input[_PC] != null) {\n        const memberEntries = se_ProvidedContextsListType(input[_PC], context);\n        if (input[_PC]?.length === 0) {\n            entries.ProvidedContexts = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `ProvidedContexts.${key}`;\n            entries[loc] = value;\n        });\n    }\n    return entries;\n};\nconst se_AssumeRoleWithSAMLRequest = (input, context) => {\n    const entries = {};\n    if (input[_RA] != null) {\n        entries[_RA] = input[_RA];\n    }\n    if (input[_PAr] != null) {\n        entries[_PAr] = input[_PAr];\n    }\n    if (input[_SAMLA] != null) {\n        entries[_SAMLA] = input[_SAMLA];\n    }\n    if (input[_PA] != null) {\n        const memberEntries = se_policyDescriptorListType(input[_PA], context);\n        if (input[_PA]?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input[_P] != null) {\n        entries[_P] = input[_P];\n    }\n    if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n    }\n    return entries;\n};\nconst se_AssumeRoleWithWebIdentityRequest = (input, context) => {\n    const entries = {};\n    if (input[_RA] != null) {\n        entries[_RA] = input[_RA];\n    }\n    if (input[_RSN] != null) {\n        entries[_RSN] = input[_RSN];\n    }\n    if (input[_WIT] != null) {\n        entries[_WIT] = input[_WIT];\n    }\n    if (input[_PI] != null) {\n        entries[_PI] = input[_PI];\n    }\n    if (input[_PA] != null) {\n        const memberEntries = se_policyDescriptorListType(input[_PA], context);\n        if (input[_PA]?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input[_P] != null) {\n        entries[_P] = input[_P];\n    }\n    if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n    }\n    return entries;\n};\nconst se_DecodeAuthorizationMessageRequest = (input, context) => {\n    const entries = {};\n    if (input[_EM] != null) {\n        entries[_EM] = input[_EM];\n    }\n    return entries;\n};\nconst se_GetAccessKeyInfoRequest = (input, context) => {\n    const entries = {};\n    if (input[_AKI] != null) {\n        entries[_AKI] = input[_AKI];\n    }\n    return entries;\n};\nconst se_GetCallerIdentityRequest = (input, context) => {\n    const entries = {};\n    return entries;\n};\nconst se_GetFederationTokenRequest = (input, context) => {\n    const entries = {};\n    if (input[_N] != null) {\n        entries[_N] = input[_N];\n    }\n    if (input[_P] != null) {\n        entries[_P] = input[_P];\n    }\n    if (input[_PA] != null) {\n        const memberEntries = se_policyDescriptorListType(input[_PA], context);\n        if (input[_PA]?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n    }\n    if (input[_T] != null) {\n        const memberEntries = se_tagListType(input[_T], context);\n        if (input[_T]?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    return entries;\n};\nconst se_GetSessionTokenRequest = (input, context) => {\n    const entries = {};\n    if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n    }\n    if (input[_SN] != null) {\n        entries[_SN] = input[_SN];\n    }\n    if (input[_TC] != null) {\n        entries[_TC] = input[_TC];\n    }\n    return entries;\n};\nconst se_policyDescriptorListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = se_PolicyDescriptorType(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst se_PolicyDescriptorType = (input, context) => {\n    const entries = {};\n    if (input[_a] != null) {\n        entries[_a] = input[_a];\n    }\n    return entries;\n};\nconst se_ProvidedContext = (input, context) => {\n    const entries = {};\n    if (input[_PAro] != null) {\n        entries[_PAro] = input[_PAro];\n    }\n    if (input[_CA] != null) {\n        entries[_CA] = input[_CA];\n    }\n    return entries;\n};\nconst se_ProvidedContextsListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = se_ProvidedContext(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst se_Tag = (input, context) => {\n    const entries = {};\n    if (input[_K] != null) {\n        entries[_K] = input[_K];\n    }\n    if (input[_Va] != null) {\n        entries[_Va] = input[_Va];\n    }\n    return entries;\n};\nconst se_tagKeyListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        entries[`member.${counter}`] = entry;\n        counter++;\n    }\n    return entries;\n};\nconst se_tagListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = se_Tag(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst de_AssumedRoleUser = (output, context) => {\n    const contents = {};\n    if (output[_ARI] != null) {\n        contents[_ARI] = __expectString(output[_ARI]);\n    }\n    if (output[_Ar] != null) {\n        contents[_Ar] = __expectString(output[_Ar]);\n    }\n    return contents;\n};\nconst de_AssumeRoleResponse = (output, context) => {\n    const contents = {};\n    if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n    }\n    if (output[_ARU] != null) {\n        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);\n    }\n    if (output[_PPS] != null) {\n        contents[_PPS] = __strictParseInt32(output[_PPS]);\n    }\n    if (output[_SI] != null) {\n        contents[_SI] = __expectString(output[_SI]);\n    }\n    return contents;\n};\nconst de_AssumeRoleWithSAMLResponse = (output, context) => {\n    const contents = {};\n    if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n    }\n    if (output[_ARU] != null) {\n        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);\n    }\n    if (output[_PPS] != null) {\n        contents[_PPS] = __strictParseInt32(output[_PPS]);\n    }\n    if (output[_S] != null) {\n        contents[_S] = __expectString(output[_S]);\n    }\n    if (output[_ST] != null) {\n        contents[_ST] = __expectString(output[_ST]);\n    }\n    if (output[_I] != null) {\n        contents[_I] = __expectString(output[_I]);\n    }\n    if (output[_Au] != null) {\n        contents[_Au] = __expectString(output[_Au]);\n    }\n    if (output[_NQ] != null) {\n        contents[_NQ] = __expectString(output[_NQ]);\n    }\n    if (output[_SI] != null) {\n        contents[_SI] = __expectString(output[_SI]);\n    }\n    return contents;\n};\nconst de_AssumeRoleWithWebIdentityResponse = (output, context) => {\n    const contents = {};\n    if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n    }\n    if (output[_SFWIT] != null) {\n        contents[_SFWIT] = __expectString(output[_SFWIT]);\n    }\n    if (output[_ARU] != null) {\n        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);\n    }\n    if (output[_PPS] != null) {\n        contents[_PPS] = __strictParseInt32(output[_PPS]);\n    }\n    if (output[_Pr] != null) {\n        contents[_Pr] = __expectString(output[_Pr]);\n    }\n    if (output[_Au] != null) {\n        contents[_Au] = __expectString(output[_Au]);\n    }\n    if (output[_SI] != null) {\n        contents[_SI] = __expectString(output[_SI]);\n    }\n    return contents;\n};\nconst de_Credentials = (output, context) => {\n    const contents = {};\n    if (output[_AKI] != null) {\n        contents[_AKI] = __expectString(output[_AKI]);\n    }\n    if (output[_SAK] != null) {\n        contents[_SAK] = __expectString(output[_SAK]);\n    }\n    if (output[_STe] != null) {\n        contents[_STe] = __expectString(output[_STe]);\n    }\n    if (output[_E] != null) {\n        contents[_E] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_E]));\n    }\n    return contents;\n};\nconst de_DecodeAuthorizationMessageResponse = (output, context) => {\n    const contents = {};\n    if (output[_DM] != null) {\n        contents[_DM] = __expectString(output[_DM]);\n    }\n    return contents;\n};\nconst de_ExpiredTokenException = (output, context) => {\n    const contents = {};\n    if (output[_m] != null) {\n        contents[_m] = __expectString(output[_m]);\n    }\n    return contents;\n};\nconst de_FederatedUser = (output, context) => {\n    const contents = {};\n    if (output[_FUI] != null) {\n        contents[_FUI] = __expectString(output[_FUI]);\n    }\n    if (output[_Ar] != null) {\n        contents[_Ar] = __expectString(output[_Ar]);\n    }\n    return contents;\n};\nconst de_GetAccessKeyInfoResponse = (output, context) => {\n    const contents = {};\n    if (output[_Ac] != null) {\n        contents[_Ac] = __expectString(output[_Ac]);\n    }\n    return contents;\n};\nconst de_GetCallerIdentityResponse = (output, context) => {\n    const contents = {};\n    if (output[_UI] != null) {\n        contents[_UI] = __expectString(output[_UI]);\n    }\n    if (output[_Ac] != null) {\n        contents[_Ac] = __expectString(output[_Ac]);\n    }\n    if (output[_Ar] != null) {\n        contents[_Ar] = __expectString(output[_Ar]);\n    }\n    return contents;\n};\nconst de_GetFederationTokenResponse = (output, context) => {\n    const contents = {};\n    if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n    }\n    if (output[_FU] != null) {\n        contents[_FU] = de_FederatedUser(output[_FU], context);\n    }\n    if (output[_PPS] != null) {\n        contents[_PPS] = __strictParseInt32(output[_PPS]);\n    }\n    return contents;\n};\nconst de_GetSessionTokenResponse = (output, context) => {\n    const contents = {};\n    if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n    }\n    return contents;\n};\nconst de_IDPCommunicationErrorException = (output, context) => {\n    const contents = {};\n    if (output[_m] != null) {\n        contents[_m] = __expectString(output[_m]);\n    }\n    return contents;\n};\nconst de_IDPRejectedClaimException = (output, context) => {\n    const contents = {};\n    if (output[_m] != null) {\n        contents[_m] = __expectString(output[_m]);\n    }\n    return contents;\n};\nconst de_InvalidAuthorizationMessageException = (output, context) => {\n    const contents = {};\n    if (output[_m] != null) {\n        contents[_m] = __expectString(output[_m]);\n    }\n    return contents;\n};\nconst de_InvalidIdentityTokenException = (output, context) => {\n    const contents = {};\n    if (output[_m] != null) {\n        contents[_m] = __expectString(output[_m]);\n    }\n    return contents;\n};\nconst de_MalformedPolicyDocumentException = (output, context) => {\n    const contents = {};\n    if (output[_m] != null) {\n        contents[_m] = __expectString(output[_m]);\n    }\n    return contents;\n};\nconst de_PackedPolicyTooLargeException = (output, context) => {\n    const contents = {};\n    if (output[_m] != null) {\n        contents[_m] = __expectString(output[_m]);\n    }\n    return contents;\n};\nconst de_RegionDisabledException = (output, context) => {\n    const contents = {};\n    if (output[_m] != null) {\n        contents[_m] = __expectString(output[_m]);\n    }\n    return contents;\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst throwDefaultError = withBaseException(__BaseException);\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new __HttpRequest(contents);\n};\nconst SHARED_HEADERS = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n};\nconst _ = \"2011-06-15\";\nconst _A = \"Action\";\nconst _AKI = \"AccessKeyId\";\nconst _AR = \"AssumeRole\";\nconst _ARI = \"AssumedRoleId\";\nconst _ARU = \"AssumedRoleUser\";\nconst _ARWSAML = \"AssumeRoleWithSAML\";\nconst _ARWWI = \"AssumeRoleWithWebIdentity\";\nconst _Ac = \"Account\";\nconst _Ar = \"Arn\";\nconst _Au = \"Audience\";\nconst _C = \"Credentials\";\nconst _CA = \"ContextAssertion\";\nconst _DAM = \"DecodeAuthorizationMessage\";\nconst _DM = \"DecodedMessage\";\nconst _DS = \"DurationSeconds\";\nconst _E = \"Expiration\";\nconst _EI = \"ExternalId\";\nconst _EM = \"EncodedMessage\";\nconst _FU = \"FederatedUser\";\nconst _FUI = \"FederatedUserId\";\nconst _GAKI = \"GetAccessKeyInfo\";\nconst _GCI = \"GetCallerIdentity\";\nconst _GFT = \"GetFederationToken\";\nconst _GST = \"GetSessionToken\";\nconst _I = \"Issuer\";\nconst _K = \"Key\";\nconst _N = \"Name\";\nconst _NQ = \"NameQualifier\";\nconst _P = \"Policy\";\nconst _PA = \"PolicyArns\";\nconst _PAr = \"PrincipalArn\";\nconst _PAro = \"ProviderArn\";\nconst _PC = \"ProvidedContexts\";\nconst _PI = \"ProviderId\";\nconst _PPS = \"PackedPolicySize\";\nconst _Pr = \"Provider\";\nconst _RA = \"RoleArn\";\nconst _RSN = \"RoleSessionName\";\nconst _S = \"Subject\";\nconst _SAK = \"SecretAccessKey\";\nconst _SAMLA = \"SAMLAssertion\";\nconst _SFWIT = \"SubjectFromWebIdentityToken\";\nconst _SI = \"SourceIdentity\";\nconst _SN = \"SerialNumber\";\nconst _ST = \"SubjectType\";\nconst _STe = \"SessionToken\";\nconst _T = \"Tags\";\nconst _TC = \"TokenCode\";\nconst _TTK = \"TransitiveTagKeys\";\nconst _UI = \"UserId\";\nconst _V = \"Version\";\nconst _Va = \"Value\";\nconst _WIT = \"WebIdentityToken\";\nconst _a = \"arn\";\nconst _m = \"message\";\nconst buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)\n    .map(([key, value]) => __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value))\n    .join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n    if (data.Error?.Code !== undefined) {\n        return data.Error.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n};\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { AssumeRoleResponseFilterSensitiveLog } from \"../models/models_0\";\nimport { de_AssumeRoleCommand, se_AssumeRoleCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class AssumeRoleCommand extends $Command\n    .classBuilder()\n    .ep({\n    ...commonParams,\n})\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRole\", {})\n    .n(\"STSClient\", \"AssumeRoleCommand\")\n    .f(void 0, AssumeRoleResponseFilterSensitiveLog)\n    .ser(se_AssumeRoleCommand)\n    .de(de_AssumeRoleCommand)\n    .build() {\n}\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_AssumeRoleWithWebIdentityCommand, se_AssumeRoleWithWebIdentityCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class AssumeRoleWithWebIdentityCommand extends $Command\n    .classBuilder()\n    .ep({\n    ...commonParams,\n})\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRoleWithWebIdentity\", {})\n    .n(\"STSClient\", \"AssumeRoleWithWebIdentityCommand\")\n    .f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog)\n    .ser(se_AssumeRoleWithWebIdentityCommand)\n    .de(de_AssumeRoleWithWebIdentityCommand)\n    .build() {\n}\n","import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst resolveRegion = async (_region, _parentRegion, credentialProviderLogger) => {\n    const region = typeof _region === \"function\" ? await _region() : _region;\n    const parentRegion = typeof _parentRegion === \"function\" ? await _parentRegion() : _parentRegion;\n    credentialProviderLogger?.debug?.(\"@aws-sdk/client-sts::resolveRegion\", \"accepting first of:\", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);\n    return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            stsClient = new stsClientCtor({\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: resolvedRegion,\n                requestHandler: requestHandler,\n                logger: logger,\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            credentialScope: Credentials.CredentialScope,\n        };\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            stsClient = new stsClientCtor({\n                region: resolvedRegion,\n                requestHandler: requestHandler,\n                logger: logger,\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            credentialScope: Credentials.CredentialScope,\n        };\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\n","import { resolveAwsSdkSigV4Config, } from \"@aws-sdk/core\";\nimport { getSmithyContext, normalizeProvider } from \"@smithy/util-middleware\";\nimport { STSClient } from \"../STSClient\";\nexport const defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {\n    return {\n        operation: getSmithyContext(context).operation,\n        region: (await normalizeProvider(config.region)()) ||\n            (() => {\n                throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n            })(),\n    };\n};\nfunction createAwsAuthSigv4HttpAuthOption(authParameters) {\n    return {\n        schemeId: \"aws.auth#sigv4\",\n        signingProperties: {\n            name: \"sts\",\n            region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n            signingProperties: {\n                config,\n                context,\n            },\n        }),\n    };\n}\nfunction createSmithyApiNoAuthHttpAuthOption(authParameters) {\n    return {\n        schemeId: \"smithy.api#noAuth\",\n    };\n}\nexport const defaultSTSHttpAuthSchemeProvider = (authParameters) => {\n    const options = [];\n    switch (authParameters.operation) {\n        case \"AssumeRoleWithSAML\": {\n            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n            break;\n        }\n        case \"AssumeRoleWithWebIdentity\": {\n            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n            break;\n        }\n        default: {\n            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n        }\n    }\n    return options;\n};\nexport const resolveStsAuthConfig = (input) => ({\n    ...input,\n    stsClientCtor: STSClient,\n});\nexport const resolveHttpAuthSchemeConfig = (config) => {\n    const config_0 = resolveStsAuthConfig(config);\n    const config_1 = resolveAwsSdkSigV4Config(config_0);\n    return {\n        ...config_1,\n    };\n};\n","export const defaultProvider = ((input) => {\n    return () => import(\"@aws-sdk/credential-provider-node\").then(({ defaultProvider }) => defaultProvider(input)());\n});\n","const F = \"required\", G = \"type\", H = \"fn\", I = \"argv\", J = \"ref\";\nconst a = false, b = true, c = \"booleanEquals\", d = \"stringEquals\", e = \"sigv4\", f = \"sts\", g = \"us-east-1\", h = \"endpoint\", i = \"https://sts.{Region}.{PartitionResult#dnsSuffix}\", j = \"tree\", k = \"error\", l = \"getAttr\", m = { [F]: false, [G]: \"String\" }, n = { [F]: true, \"default\": false, [G]: \"Boolean\" }, o = { [J]: \"Endpoint\" }, p = { [H]: \"isSet\", [I]: [{ [J]: \"Region\" }] }, q = { [J]: \"Region\" }, r = { [H]: \"aws.partition\", [I]: [q], \"assign\": \"PartitionResult\" }, s = { [J]: \"UseFIPS\" }, t = { [J]: \"UseDualStack\" }, u = { \"url\": \"https://sts.amazonaws.com\", \"properties\": { \"authSchemes\": [{ \"name\": e, \"signingName\": f, \"signingRegion\": g }] }, \"headers\": {} }, v = {}, w = { \"conditions\": [{ [H]: d, [I]: [q, \"aws-global\"] }], [h]: u, [G]: h }, x = { [H]: c, [I]: [s, true] }, y = { [H]: c, [I]: [t, true] }, z = { [H]: l, [I]: [{ [J]: \"PartitionResult\" }, \"supportsFIPS\"] }, A = { [J]: \"PartitionResult\" }, B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, \"supportsDualStack\"] }] }, C = [{ [H]: \"isSet\", [I]: [o] }], D = [x], E = [y];\nconst _data = { version: \"1.0\", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: \"UseGlobalEndpoint\" }, b] }, { [H]: \"not\", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], rules: [{ conditions: [{ [H]: d, [I]: [q, \"ap-northeast-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"ap-south-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"ap-southeast-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"ap-southeast-2\"] }], endpoint: u, [G]: h }, w, { conditions: [{ [H]: d, [I]: [q, \"ca-central-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"eu-central-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"eu-north-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"eu-west-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"eu-west-2\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"eu-west-3\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"sa-east-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"us-east-2\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"us-west-1\"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, \"us-west-2\"] }], endpoint: u, [G]: h }, { endpoint: { url: i, properties: { authSchemes: [{ name: e, signingName: f, signingRegion: \"{Region}\" }] }, headers: v }, [G]: h }], [G]: j }, { conditions: C, rules: [{ conditions: D, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", [G]: k }, { conditions: E, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: h }], [G]: j }, { conditions: [p], rules: [{ conditions: [r], rules: [{ conditions: [x, y], rules: [{ conditions: [{ [H]: c, [I]: [b, z] }, B], rules: [{ endpoint: { url: \"https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: v, headers: v }, [G]: h }], [G]: j }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", [G]: k }], [G]: j }, { conditions: D, rules: [{ conditions: [{ [H]: c, [I]: [z, b] }], rules: [{ conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, \"name\"] }, \"aws-us-gov\"] }], endpoint: { url: \"https://sts.{Region}.amazonaws.com\", properties: v, headers: v }, [G]: h }, { endpoint: { url: \"https://sts-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: v, headers: v }, [G]: h }], [G]: j }, { error: \"FIPS is enabled but this partition does not support FIPS\", [G]: k }], [G]: j }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: \"https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: v, headers: v }, [G]: h }], [G]: j }, { error: \"DualStack is enabled but this partition does not support DualStack\", [G]: k }], [G]: j }, w, { endpoint: { url: i, properties: v, headers: v }, [G]: h }], [G]: j }], [G]: j }, { error: \"Invalid Configuration: Missing Region\", [G]: k }] };\nexport const ruleSet = _data;\n","import { resolveEndpoint } from \"@smithy/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n","export const getHttpAuthExtensionConfiguration = (runtimeConfig) => {\n    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n    let _credentials = runtimeConfig.credentials;\n    return {\n        setHttpAuthScheme(httpAuthScheme) {\n            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);\n            if (index === -1) {\n                _httpAuthSchemes.push(httpAuthScheme);\n            }\n            else {\n                _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n            }\n        },\n        httpAuthSchemes() {\n            return _httpAuthSchemes;\n        },\n        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n            _httpAuthSchemeProvider = httpAuthSchemeProvider;\n        },\n        httpAuthSchemeProvider() {\n            return _httpAuthSchemeProvider;\n        },\n        setCredentials(credentials) {\n            _credentials = credentials;\n        },\n        credentials() {\n            return _credentials;\n        },\n    };\n};\nexport const resolveHttpAuthRuntimeConfig = (config) => {\n    return {\n        httpAuthSchemes: config.httpAuthSchemes(),\n        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n        credentials: config.credentials(),\n    };\n};\n","import { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { resolveRegionConfig } from \"@smithy/config-resolver\";\nimport { DefaultIdentityProviderConfig, getHttpAuthSchemeEndpointRuleSetPlugin, getHttpSigningPlugin, } from \"@smithy/core\";\nimport { getContentLengthPlugin } from \"@smithy/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@smithy/middleware-endpoint\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@smithy/middleware-retry\";\nimport { Client as __Client, } from \"@smithy/smithy-client\";\nimport { defaultSTSHttpAuthSchemeParametersProvider, resolveHttpAuthSchemeConfig, } from \"./auth/httpAuthSchemeProvider\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nimport { resolveRuntimeExtensions } from \"./runtimeExtensions\";\nexport { __Client };\nexport class STSClient extends __Client {\n    constructor(...[configuration]) {\n        const _config_0 = __getRuntimeConfig(configuration || {});\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveUserAgentConfig(_config_5);\n        const _config_7 = resolveHttpAuthSchemeConfig(_config_6);\n        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);\n        super(_config_8);\n        this.config = _config_8;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {\n            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),\n            identityProviderConfigProvider: this.getIdentityProviderConfigProvider(),\n        }));\n        this.middlewareStack.use(getHttpSigningPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n    getDefaultHttpAuthSchemeParametersProvider() {\n        return defaultSTSHttpAuthSchemeParametersProvider;\n    }\n    getIdentityProviderConfigProvider() {\n        return async (config) => new DefaultIdentityProviderConfig({\n            \"aws.auth#sigv4\": config.credentials,\n        });\n    }\n}\n","import packageInfo from \"../package.json\";\nimport { defaultProvider as credentialDefaultProvider } from \"./credentialDefaultProvider\";\nimport { AwsSdkSigV4Signer, emitWarningIfUnsupportedVersion as awsCheckVersion } from \"@aws-sdk/core\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@smithy/config-resolver\";\nimport { NoAuthSigner } from \"@smithy/core\";\nimport { Hash } from \"@smithy/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@smithy/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@smithy/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@smithy/node-http-handler\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@smithy/util-retry\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@smithy/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@smithy/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@smithy/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    awsCheckVersion(process.version);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? credentialDefaultProvider,\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        httpAuthSchemes: config?.httpAuthSchemes ?? [\n            {\n                schemeId: \"aws.auth#sigv4\",\n                identityProvider: (ipc) => ipc.getIdentityProvider(\"aws.auth#sigv4\") ||\n                    (async (idProps) => await credentialDefaultProvider(idProps?.__config || {})()),\n                signer: new AwsSdkSigV4Signer(),\n            },\n            {\n                schemeId: \"smithy.api#noAuth\",\n                identityProvider: (ipc) => ipc.getIdentityProvider(\"smithy.api#noAuth\") || (async () => ({})),\n                signer: new NoAuthSigner(),\n            },\n        ],\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: RequestHandler.create(config?.requestHandler ?? defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n","import { AwsSdkSigV4Signer } from \"@aws-sdk/core\";\nimport { NoAuthSigner } from \"@smithy/core\";\nimport { NoOpLogger } from \"@smithy/smithy-client\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { fromBase64, toBase64 } from \"@smithy/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@smithy/util-utf8\";\nimport { defaultSTSHttpAuthSchemeProvider } from \"./auth/httpAuthSchemeProvider\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => {\n    return {\n        apiVersion: \"2011-06-15\",\n        base64Decoder: config?.base64Decoder ?? fromBase64,\n        base64Encoder: config?.base64Encoder ?? toBase64,\n        disableHostPrefix: config?.disableHostPrefix ?? false,\n        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n        extensions: config?.extensions ?? [],\n        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultSTSHttpAuthSchemeProvider,\n        httpAuthSchemes: config?.httpAuthSchemes ?? [\n            {\n                schemeId: \"aws.auth#sigv4\",\n                identityProvider: (ipc) => ipc.getIdentityProvider(\"aws.auth#sigv4\"),\n                signer: new AwsSdkSigV4Signer(),\n            },\n            {\n                schemeId: \"smithy.api#noAuth\",\n                identityProvider: (ipc) => ipc.getIdentityProvider(\"smithy.api#noAuth\") || (async () => ({})),\n                signer: new NoAuthSigner(),\n            },\n        ],\n        logger: config?.logger ?? new NoOpLogger(),\n        serviceId: config?.serviceId ?? \"STS\",\n        urlParser: config?.urlParser ?? parseUrl,\n        utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n        utf8Encoder: config?.utf8Encoder ?? toUtf8,\n    };\n};\n","import { getAwsRegionExtensionConfiguration, resolveAwsRegionExtensionConfiguration, } from \"@aws-sdk/region-config-resolver\";\nimport { getHttpHandlerExtensionConfiguration, resolveHttpHandlerRuntimeConfig } from \"@smithy/protocol-http\";\nimport { getDefaultExtensionConfiguration, resolveDefaultRuntimeConfig } from \"@smithy/smithy-client\";\nimport { getHttpAuthExtensionConfiguration, resolveHttpAuthRuntimeConfig } from \"./auth/httpAuthExtensionConfiguration\";\nconst asPartial = (t) => t;\nexport const resolveRuntimeExtensions = (runtimeConfig, extensions) => {\n    const extensionConfiguration = {\n        ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),\n        ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),\n        ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),\n        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig)),\n    };\n    extensions.forEach((extension) => extension.configure(extensionConfiguration));\n    return {\n        ...runtimeConfig,\n        ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),\n        ...resolveDefaultRuntimeConfig(extensionConfiguration),\n        ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),\n        ...resolveHttpAuthRuntimeConfig(extensionConfiguration),\n    };\n};\n","import { getDefaultRoleAssumer as StsGetDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity as StsGetDefaultRoleAssumerWithWebIdentity, } from \"./defaultStsRoleAssumers\";\nimport { STSClient } from \"./STSClient\";\nconst getCustomizableStsClientCtor = (baseCtor, customizations) => {\n    if (!customizations)\n        return baseCtor;\n    else\n        return class CustomizableSTSClient extends baseCtor {\n            constructor(config) {\n                super(config);\n                for (const customization of customizations) {\n                    this.middlewareStack.use(customization);\n                }\n            }\n        };\n};\nexport const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),\n    ...input,\n});\n"],"names":["commonParams","UseGlobalEndpoint","type","name","UseFIPS","Endpoint","Region","UseDualStack","STSServiceException","constructor","options","super","Object","setPrototypeOf","this","prototype","ExpiredTokenException","opts","$fault","MalformedPolicyDocumentException","PackedPolicyTooLargeException","RegionDisabledException","IDPRejectedClaimException","InvalidIdentityTokenException","IDPCommunicationErrorException","InvalidAuthorizationMessageException","CredentialsFilterSensitiveLog","obj","SecretAccessKey","AssumeRoleResponseFilterSensitiveLog","Credentials","AssumeRoleWithWebIdentityRequestFilterSensitiveLog","WebIdentityToken","AssumeRoleWithWebIdentityResponseFilterSensitiveLog","se_AssumeRoleCommand","async","input","context","headers","SHARED_HEADERS","body","buildFormUrlencodedString","se_AssumeRoleRequest","_A","_AR","_V","_","buildHttpRpcRequest","undefined","se_AssumeRoleWithWebIdentityCommand","se_AssumeRoleWithWebIdentityRequest","_ARWWI","de_AssumeRoleCommand","output","statusCode","de_CommandError","data","contents","de_AssumeRoleResponse","AssumeRoleResult","$metadata","deserializeMetadata","de_AssumeRoleWithWebIdentityCommand","de_AssumeRoleWithWebIdentityResponse","AssumeRoleWithWebIdentityResult","parsedOutput","errorCode","loadQueryErrorCode","de_ExpiredTokenExceptionRes","de_MalformedPolicyDocumentExceptionRes","de_PackedPolicyTooLargeExceptionRes","de_RegionDisabledExceptionRes","de_IDPRejectedClaimExceptionRes","de_InvalidIdentityTokenExceptionRes","de_IDPCommunicationErrorExceptionRes","de_InvalidAuthorizationMessageExceptionRes","parsedBody","throwDefaultError","Error","deserialized","de_ExpiredTokenException","exception","de_IDPCommunicationErrorException","de_IDPRejectedClaimException","de_InvalidAuthorizationMessageException","de_InvalidIdentityTokenException","de_MalformedPolicyDocumentException","de_PackedPolicyTooLargeException","de_RegionDisabledException","entries","_RA","_RSN","_PA","memberEntries","se_policyDescriptorListType","length","PolicyArns","forEach","key","value","_P","_DS","_T","se_tagListType","Tags","_TTK","se_tagKeyListType","TransitiveTagKeys","_EI","_SN","_TC","_SI","_PC","se_ProvidedContextsListType","ProvidedContexts","_WIT","_PI","counter","entry","se_PolicyDescriptorType","_a","se_ProvidedContext","_PAro","_CA","se_Tag","_K","_Va","de_AssumedRoleUser","_ARI","_Ar","_C","de_Credentials","_ARU","_PPS","_SFWIT","_Pr","_Au","_AKI","_SAK","_STe","_E","_m","httpStatusCode","requestId","extendedRequestId","cfId","path","resolvedHostname","hostname","protocol","port","basePath","endpoint","method","endsWith","slice","formEntries","map","join","Code","AssumeRoleCommand","classBuilder","ep","m","Command","cs","config","o","serialize","deserialize","getEndpointParameterInstructions","s","n","f","ser","de","build","AssumeRoleWithWebIdentityCommand","ASSUME_ROLE_DEFAULT_REGION","resolveRegion","_region","_parentRegion","credentialProviderLogger","region","parentRegion","debug","defaultSTSHttpAuthSchemeParametersProvider","operation","defaultSTSHttpAuthSchemeProvider","authParameters","push","schemeId","signingProperties","propertiesExtractor","createAwsAuthSigv4HttpAuthOption","defaultProvider","then","F","G","H","I","J","b","c","d","e","g","h","i","j","k","l","p","q","r","t","u","v","w","x","y","z","A","B","C","D","E","ruleSet","version","parameters","rules","conditions","url","properties","authSchemes","signingName","signingRegion","error","defaultEndpointResolver","endpointParams","logger","getHttpAuthExtensionConfiguration","runtimeConfig","_httpAuthSchemes","httpAuthSchemes","_httpAuthSchemeProvider","httpAuthSchemeProvider","_credentials","credentials","setHttpAuthScheme","httpAuthScheme","index","findIndex","scheme","splice","setHttpAuthSchemeProvider","setCredentials","STSClient","configuration","_config_1","process","defaultsMode","defaultConfigProvider","clientSharedValues","apiVersion","base64Decoder","base64Encoder","disableHostPrefix","endpointProvider","extensions","identityProvider","ipc","getIdentityProvider","signer","AwsSdkSigV4Signer","serviceId","urlParser","utf8Decoder","utf8Encoder","runtime","bodyLengthChecker","credentialDefaultProvider","defaultUserAgentProvider","clientVersion","idProps","__config","maxAttempts","requestHandler","create","retryMode","default","sha256","bind","streamCollector","useDualstackEndpoint","useFipsEndpoint","useGlobalEndpoint","defaultSigningName","_config_2","_config_3","_config_4","_config_5","_config_8","extensionConfiguration","extension","configure","resolveRuntimeExtensions","config_0","stsClientCtor","resolveAwsSdkSigV4Config","resolveHttpAuthSchemeConfig","middlewareStack","use","httpAuthSchemeParametersProvider","getDefaultHttpAuthSchemeParametersProvider","identityProviderConfigProvider","getIdentityProviderConfigProvider","destroy","getCustomizableStsClientCtor","baseCtor","customizations","customization","stsOptions","stsPlugins","stsClient","closureSourceCreds","sourceCreds","params","parentClientConfig","resolvedRegion","send","AccessKeyId","RoleArn","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration","credentialScope","CredentialScope"],"sourceRoot":""}