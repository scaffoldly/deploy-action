{"version":3,"file":"109.js","mappings":"4JAAO,MCEMA,EAAc,CAACC,EAAO,CAAC,IAAMC,UACtCD,EAAKE,QAAQC,MAAM,uCAAwC,eAC3D,MAAMC,QAAiB,QAAgBJ,GACvC,MCDqCC,OAAOI,EAAaD,KACzD,MAAME,EAAUF,EAASC,GACzB,IAAID,EAASC,GAwBT,MAAM,IAAI,KAAyB,WAAWA,oDAxBvB,CACvB,MAAME,EAAoBD,EAA4B,mBACtD,QAA0BE,IAAtBD,EAkBA,MAAM,IAAI,KAAyB,WAAWF,yCAlBb,CACjC,MAAMI,GAAc,IAAAC,WAAU,EAAAC,MAC9B,IACI,MAAM,OAAEC,SAAiBH,EAAYF,GACrC,IAAIM,EACJ,IACIA,EAAOC,KAAKC,MAAMH,EAAOI,OAC7B,CACA,MACI,MAAMC,MAAM,WAAWZ,8CAC3B,CACA,MFnB8B,EAACA,EAAaQ,KACxD,GAAqB,IAAjBA,EAAKK,QACL,MAAMD,MAAM,WAAWZ,kDAE3B,QAAyBG,IAArBK,EAAKM,kBAAsDX,IAAzBK,EAAKO,gBACvC,MAAMH,MAAM,WAAWZ,sDAE3B,GAAIQ,EAAKQ,WAAY,CACjB,MAAMC,EAAc,IAAIC,KAExB,GADmB,IAAIA,KAAKV,EAAKQ,YAChBC,EACb,MAAML,MAAM,WAAWZ,qDAE/B,CACA,MAAO,CACHmB,YAAaX,EAAKM,YAClBM,gBAAiBZ,EAAKO,mBAClBP,EAAKa,cAAgB,CAAEC,aAAcd,EAAKa,iBAC1Cb,EAAKQ,YAAc,CAAEO,WAAY,IAAIL,KAAKV,EAAKQ,gBAC/CR,EAAKgB,iBAAmB,CAAEC,gBAAiBjB,EAAKgB,iBACvD,EEDkBE,CAA+B1B,EAAaQ,EACvD,CACA,MAAOmB,GACH,MAAM,IAAI,KAAyBA,EAAMC,QAC7C,CACJ,CAIJ,CAGA,ED1BOC,EAA0B,QAAelC,GAAOI,EAAS,C","sources":["webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js"],"sourcesContent":["export const getValidatedProcessCredentials = (profileName, data) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    return {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n    };\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-process\", \"fromProcess\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName(init), profiles);\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message);\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);\n    }\n};\n"],"names":["fromProcess","init","async","logger","debug","profiles","profileName","profile","credentialProcess","undefined","execPromise","promisify","exec","stdout","data","JSON","parse","trim","Error","Version","AccessKeyId","SecretAccessKey","Expiration","currentTime","Date","accessKeyId","secretAccessKey","SessionToken","sessionToken","expiration","CredentialScope","credentialScope","getValidatedProcessCredentials","error","message","resolveProcessCredentials"],"sourceRoot":""}