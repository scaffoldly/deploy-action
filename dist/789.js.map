{"version":3,"file":"789.js","mappings":"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","sources":["webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName) => {\n    const sourceProvidersMap = {\n        EcsContainer: (options) => import(\"@smithy/credential-provider-imds\").then(({ fromContainerMetadata }) => fromContainerMetadata(options)),\n        Ec2InstanceMetadata: (options) => import(\"@smithy/credential-provider-imds\").then(({ fromInstanceMetadata }) => fromInstanceMetadata(options)),\n        Environment: (options) => import(\"@aws-sdk/credential-provider-env\").then(({ fromEnv }) => fromEnv(options)),\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`);\n    }\n};\n","export const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1;\nexport const resolveStaticCredentials = (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"resolveStaticCredentials\");\n    return Promise.resolve({\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        credentialScope: profile.aws_credential_scope,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleProfile(data)) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, options);\n    }\n    throw new CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n    (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\nconst isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\nconst isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"resolveAssumeRoleCredentials (STS)\");\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"./loadSts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: options?.parentClientConfig,\n        }, options.clientPlugins);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), false);\n    }\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : (await resolveCredentialSource(data.credential_source, profileName)(options))();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n        DurationSeconds: parseInt(data.duration_seconds || \"3600\", 10),\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n","export const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})());\n","export const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})());\n","export const resolveSsoCredentials = async (profile, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n    })();\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName(init), profiles, init);\n};\n"],"names":["isStaticCredsProfile","arg","Boolean","aws_access_key_id","aws_secret_access_key","indexOf","aws_session_token","resolveStaticCredentials","profile","options","logger","debug","Promise","resolve","accessKeyId","secretAccessKey","sessionToken","credentialScope","aws_credential_scope","resolveProfileData","async","profileName","profiles","visitedProfiles","data","Object","keys","length","role_arn","role_session_name","external_id","mfa_serial","source_profile","credential_source","isAssumeRoleWithSourceProfile","isAssumeRoleWithProviderProfile","roleAssumer","getDefaultRoleAssumer","clientConfig","credentialProviderLogger","parentClientConfig","clientPlugins","join","sourceCredsProvider","credentialSource","sourceProvidersMap","EcsContainer","then","fromContainerMetadata","Ec2InstanceMetadata","fromInstanceMetadata","Environment","fromEnv","resolveCredentialSource","params","RoleArn","RoleSessionName","Date","now","ExternalId","DurationSeconds","parseInt","duration_seconds","mfaCodeProvider","SerialNumber","TokenCode","sourceCreds","resolveAssumeRoleCredentials","web_identity_token_file","isWebIdentityProfile","fromTokenFile","webIdentityTokenFile","roleArn","roleSessionName","roleAssumerWithWebIdentity","resolveWebIdentityCredentials","credential_process","isProcessProfile","fromProcess","resolveProcessCredentials","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","isSsoProfile","fromSSO","resolveSsoCredentials","fromIni","init"],"sourceRoot":""}