{"version":3,"file":"819.js","mappings":"6JAAO,MAAMA,EAAgBC,GAASC,UAClCD,EAAKE,QAAQC,MAAM,4CAA6C,gBAChE,MAAM,QAAEC,EAAO,gBAAEC,EAAe,iBAAEC,EAAgB,WAAEC,EAAU,WAAEC,EAAU,OAAEC,EAAM,gBAAEC,GAAoBV,EACxG,IAAI,2BAAEW,GAA+BX,EACrC,IAAKW,EAA4B,CAC7B,MAAM,qCAAEC,SAA+C,8BACvDD,EAA6BC,EAAqC,IAC3DZ,EAAKa,aACRC,yBAA0Bd,EAAKE,OAC/Ba,mBAAoBf,EAAKe,oBAC1Bf,EAAKgB,cACZ,CACA,OAAOL,EAA2B,CAC9BM,QAASb,EACTc,gBAAiBb,GAAmB,sBAAsBc,KAAKC,QAC/DC,iBAAkBf,EAClBgB,WAAYf,EACZgB,WAAYf,EACZgB,OAAQf,EACRgB,gBAAiBf,GACnB,ECdOgB,EAAgB,CAAC1B,EAAO,CAAC,IAAMC,UACxCD,EAAKE,QAAQC,MAAM,4CAA6C,iBAChE,MAAMwB,EAAuB3B,GAAM2B,sBAAwBC,QAAQC,IAAkB,4BAC/EzB,EAAUJ,GAAMI,SAAWwB,QAAQC,IAAgB,aACnDxB,EAAkBL,GAAMK,iBAAmBuB,QAAQC,IAAyB,sBAClF,IAAKF,IAAyBvB,EAC1B,MAAM,IAAI,KAAyB,4CAEvC,OAAOL,EAAa,IACbC,EACHM,kBAAkB,IAAAwB,cAAaH,EAAsB,CAAEI,SAAU,UACjE3B,UACAC,mBAJGN,EAKH,C","sources":["webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js","webpack://@scaffoldly/deploy-action/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js"],"sourcesContent":["export const fromWebToken = (init) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity\", \"fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"./loadSts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: init.parentClientConfig,\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity\", \"fromTokenFile\");\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\");\n    }\n    return fromWebToken({\n        ...init,\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n};\n"],"names":["fromWebToken","init","async","logger","debug","roleArn","roleSessionName","webIdentityToken","providerId","policyArns","policy","durationSeconds","roleAssumerWithWebIdentity","getDefaultRoleAssumerWithWebIdentity","clientConfig","credentialProviderLogger","parentClientConfig","clientPlugins","RoleArn","RoleSessionName","Date","now","WebIdentityToken","ProviderId","PolicyArns","Policy","DurationSeconds","fromTokenFile","webIdentityTokenFile","process","env","readFileSync","encoding"],"sourceRoot":""}